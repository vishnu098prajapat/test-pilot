
"use client";

import React from 'react';
import { useParams, useRouter, useSearchParams } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { QrCode, ShieldCheck, ArrowLeft } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import Link from 'next/link';
import Image from 'next/image';
import { useAuth } from '@/hooks/use-auth';
import type { PlanId } from '@/hooks/use-subscription';

const USER_PLANS_STORAGE_KEY = "test_pilot_user_plans";

export default function MockPaymentPage() {
  const params = useParams();
  const searchParams = useSearchParams();
  const router = useRouter();
  const { toast } = useToast();
  const { user } = useAuth();

  const planId = params.planId as PlanId;
  const planName = searchParams.get('name') || 'Selected Plan';
  const planPrice = searchParams.get('price') || 'N/A';

  const handleConfirmPayment = () => {
    toast({
      title: "Processing Confirmation...",
      description: "Please wait while we verify your (simulated) payment.",
      duration: 1500,
    });
    
    // Simulate updating the user's plan in localStorage
    if (user) {
        try {
            const storedPlans = JSON.parse(localStorage.getItem(USER_PLANS_STORAGE_KEY) || '{}');
            storedPlans[user.id] = planId;
            localStorage.setItem(USER_PLANS_STORAGE_KEY, JSON.stringify(storedPlans));
            console.log(`[MockPayment] Plan for user ${user.id} updated to ${planId}`);
        } catch(e) {
            console.error("Failed to update user plan in localStorage", e);
             toast({
                title: "Error",
                description: `Could not save your new plan subscription.`,
                variant: "destructive",
                duration: 3000,
            });
            router.push('/dashboard/plans');
            return;
        }
    } else {
        toast({
            title: "Authentication Error",
            description: `Could not find logged-in user to assign the plan.`,
            variant: "destructive",
            duration: 3000,
        });
        router.push('/auth/login');
        return;
    }


    setTimeout(() => {
      toast({
        title: "Payment Confirmed! (Simulation)",
        description: `Your subscription to ${planName} is now active.`,
        variant: "default",
        duration: 3000,
      });
      // Force a reload of the dashboard to ensure the new subscription state is picked up by all components
      window.location.href = '/dashboard';
    }, 2000);
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-background p-4">
      <Card className="w-full max-w-md shadow-xl rounded-lg">
        <CardHeader className="text-center">
          <QrCode className="w-12 h-12 text-primary mx-auto mb-4" />
          <CardTitle className="text-2xl font-headline">Scan to Pay for {planName}</CardTitle>
          <CardDescription>
            Use your preferred UPI app to scan the QR code below and complete the payment of <span className="font-semibold text-primary">{planPrice}</span>.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6 text-center">
          <div className="flex justify-center">
            <Image 
              src={`https://placehold.co/250x250.png?text=Scan+UPI+QR%0AFor+${encodeURIComponent(planName)}%0AAmount: ${encodeURIComponent(planPrice)}`} 
              alt={`Placeholder QR code for ${planName} payment`}
              width={250} 
              height={250} 
              className="rounded-md border shadow-sm"
              data-ai-hint="payment QR code"
            />
          </div>
          <p className="text-xs text-muted-foreground">
            This is a placeholder QR code for demonstration. In a real scenario, this would be a dynamic QR code generated by a payment gateway.
          </p>
          <Button 
            onClick={handleConfirmPayment} 
            className="w-full bg-primary hover:bg-primary/90 text-primary-foreground"
            size="lg"
          >
            <ShieldCheck className="mr-2 h-5 w-5" /> I Have Paid & Confirm
          </Button>
        </CardContent>
        <CardFooter className="flex justify-center">
          <Button variant="ghost" asChild>
            <Link href="/dashboard/plans">
              <ArrowLeft className="mr-2 h-4 w-4" /> Cancel and Go Back to Plans
            </Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}
