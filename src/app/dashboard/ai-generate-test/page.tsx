
"use client";

import React, { useState } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Sparkles, Loader2, ListChecks, Send } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form';
import { generateTestQuestions, GenerateTestQuestionsInput, AIQuestion } from '@/ai/flows/generate-test-questions-flow';
import type { Question as TestBuilderQuestion, Option as TestBuilderOption, MCQQuestion, ShortAnswerQuestion, TrueFalseQuestion } from '@/lib/types';


const AIGenerateTestSchema = z.object({
  subject: z.string().min(3, "Subject must be at least 3 characters."),
  questionType: z.enum(['mcq', 'short-answer', 'true-false'], { required_error: "Question type is required." }),
  topics: z.string().min(3, "Please provide at least one topic.").transform(val => val.split(',').map(t => t.trim()).filter(t => t.length > 0)),
  numberOfQuestions: z.coerce.number().int().min(1, "Minimum 1 question.").max(10, "Maximum 10 questions."),
});

type AIGenerateTestFormValues = z.infer<typeof AIGenerateTestSchema>;

const AI_GENERATED_QUESTIONS_STORAGE_KEY = "aiGeneratedTestQuestions";

export default function AIGenerateTestPage() {
  const router = useRouter();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [generatedQuestions, setGeneratedQuestions] = useState<AIQuestion[] | null>(null);

  const form = useForm<AIGenerateTestFormValues>({
    resolver: zodResolver(AIGenerateTestSchema),
    defaultValues: {
      subject: '',
      questionType: 'mcq',
      topics: '',
      numberOfQuestions: 5,
    },
  });

  const onSubmit = async (data: AIGenerateTestFormValues) => {
    setIsLoading(true);
    setGeneratedQuestions(null);
    try {
      const input: GenerateTestQuestionsInput = {
        subject: data.subject,
        questionType: data.questionType,
        topics: data.topics,
        numberOfQuestions: data.numberOfQuestions,
      };
      const result = await generateTestQuestions(input);
      if (result.generatedQuestions && result.generatedQuestions.length > 0) {
        setGeneratedQuestions(result.generatedQuestions);
        toast({ title: "Success!", description: `${result.generatedQuestions.length} questions generated by AI.` });
      } else {
        toast({ title: "No Questions", description: "AI did not return any questions. Try adjusting your topics or subject.", variant: "destructive" });
      }
    } catch (error: any) {
      console.error("AI Generation Error:", error);
      toast({ title: "AI Error", description: error.message || "Failed to generate questions. Please try again.", variant: "destructive" });
    } finally {
      setIsLoading(false);
    }
  };

  const transformAIQuestionsToTestBuilderFormat = (aiQuestions: AIQuestion[]): TestBuilderQuestion[] => {
    return aiQuestions.map((aiQ, index): TestBuilderQuestion => {
      const baseQuestion = {
        id: `ai-q-${Date.now()}-${index}`,
        text: aiQ.text,
        points: aiQ.points || 10,
      };

      if (aiQ.type === 'mcq') {
        const options: TestBuilderOption[] = (aiQ.options || []).map((optText, optIndex) => ({
          id: `ai-q-${index}-opt-${Date.now()}-${optIndex}`,
          text: optText,
        }));
        const correctOption = options.find(opt => opt.text === aiQ.correctAnswer);
        return {
          ...baseQuestion,
          type: 'mcq',
          options,
          correctOptionId: correctOption ? correctOption.id : null,
        } as MCQQuestion;
      } else if (aiQ.type === 'short-answer') {
        return {
          ...baseQuestion,
          type: 'short-answer',
          correctAnswer: aiQ.correctAnswer as string,
        } as ShortAnswerQuestion;
      } else { // true-false
        return {
          ...baseQuestion,
          type: 'true-false',
          correctAnswer: aiQ.correctAnswer as boolean,
        } as TrueFalseQuestion;
      }
    });
  };

  const handleUseQuestions = () => {
    if (!generatedQuestions) return;
    const testBuilderQuestions = transformAIQuestionsToTestBuilderFormat(generatedQuestions);
    try {
      localStorage.setItem(AI_GENERATED_QUESTIONS_STORAGE_KEY, JSON.stringify(testBuilderQuestions));
      toast({title: "Questions Saved", description: "Redirecting to Test Builder with generated questions."});
      router.push('/dashboard/create-test?source=ai');
    } catch (e) {
      toast({title: "Error", description: "Could not save questions for Test Builder.", variant: "destructive"});
    }
  };


  return (
    <div className="container mx-auto py-2">
      <Card className="max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle className="text-2xl font-headline flex items-center">
            <Sparkles className="mr-2 h-6 w-6 text-primary" /> AI Test Generator
          </CardTitle>
          <CardDescription>
            Let AI help you create test questions. Describe your test, and the AI will generate questions for you.
          </CardDescription>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="space-y-6">
              <FormField
                control={form.control}
                name="subject"
                render={({ field }) => (
                  <FormItem>
                    <Label htmlFor="subject">Subject</Label>
                    <Input id="subject" placeholder="e.g., World History, Algebra I" {...field} />
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="questionType"
                render={({ field }) => (
                  <FormItem>
                    <Label htmlFor="questionType">Question Type</Label>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger id="questionType">
                          <SelectValue placeholder="Select question type" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="mcq">Multiple Choice (MCQ)</SelectItem>
                        <SelectItem value="short-answer">Short Answer</SelectItem>
                        <SelectItem value="true-false">True/False</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="topics"
                render={({ field }) => (
                  <FormItem>
                    <Label htmlFor="topics">Topics (comma-separated)</Label>
                    <Textarea
                      id="topics"
                      placeholder="e.g., French Revolution, Photosynthesis, Quadratic Equations"
                      {...field}
                      className="min-h-[80px]"
                    />
                    <FormMessage />
                     <p className="text-xs text-muted-foreground">Enter specific topics the AI should focus on.</p>
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="numberOfQuestions"
                render={({ field }) => (
                  <FormItem>
                    <Label htmlFor="numberOfQuestions">Number of Questions (1-10)</Label>
                    <Input id="numberOfQuestions" type="number" min="1" max="10" {...field} />
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
            <CardFooter className="flex justify-end">
              <Button type="submit" disabled={isLoading}>
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" /> Generate Questions
                  </>
                )}
              </Button>
            </CardFooter>
          </form>
        </Form>
      </Card>

      {generatedQuestions && generatedQuestions.length > 0 && (
        <Card className="max-w-2xl mx-auto mt-8">
          <CardHeader>
            <CardTitle className="text-xl font-headline flex items-center">
              <ListChecks className="mr-2 h-5 w-5" /> Generated Questions
            </CardTitle>
            <CardDescription>Review the questions generated by AI. You can then use them in the Test Builder.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4 max-h-96 overflow-y-auto">
            {generatedQuestions.map((q, index) => (
              <div key={index} className="p-3 border rounded-md bg-muted/50">
                <p className="font-semibold">{index + 1}. ({q.type.toUpperCase()}) {q.text}</p>
                {q.type === 'mcq' && q.options && (
                  <ul className="list-disc pl-5 mt-1 text-sm">
                    {q.options.map((opt, optIndex) => (
                      <li key={optIndex} className={opt === q.correctAnswer ? 'text-green-600 font-medium' : ''}>
                        {opt} {opt === q.correctAnswer ? '(Correct)' : ''}
                      </li>
                    ))}
                  </ul>
                )}
                {(q.type === 'short-answer' || q.type === 'true-false') && (
                  <p className="text-sm mt-1">Correct Answer: <span className="text-green-600 font-medium">{String(q.correctAnswer)}</span></p>
                )}
                 <p className="text-xs text-muted-foreground mt-1">Points: {q.points}</p>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button onClick={handleUseQuestions}>
              <Send className="mr-2 h-4 w-4" /> Use these Questions in Test Builder
            </Button>
          </CardFooter>
        </Card>
      )}
    </div>
  );
}

